#include "2D_Conv.h"
#include "2D_Conv_base.h"


////////////////////////////////////////////////////////
//  名称:
//      Multi_Array_8x8(根据硬件同步，暂不提供8*8，如有需求请使用16*16)
//  功能:
//      两个8X8矩阵相乘,数据格式为Q15
//  参数:
//      1.M[RSP+2*MMU_BASE]：输入矩阵A的首地址
//      2.M[RSP+1*MMU_BASE]：输入矩阵B的首地址
//      3.M[RSP+0*MMU_BASE]：输出矩阵的首地址
//  返回值:
//      无
////////////////////////////////////////////////////////
//Sub_AutoField Multi_Array_8x8
//{
//	RA0 = M[RSP + 2 * MMU_BASE];	//输入矩阵A的地址	
//	RA1 = M[RSP + 1 * MMU_BASE];	//输入矩阵B的地址
//	RA2 = M[RSP + 0 * MMU_BASE];	//输出地址
//
//	double A[64], B[64];
//	double C[64] = { 0 };
//	for (int i = 0; i < 64; i++)
//	{
//		RD0 = M[RA0++];
//		A[i] = RD0.m_data;
//		A[i] = A[i] / 32768;
//	}
//	for (int i = 0; i < 64; i++)
//	{
//		RD0 = M[RA1++];
//		B[i] = RD0.m_data;
//		B[i] = B[i] / 32768;
//	}
//	//算法实现
//	for (int i = 0; i < 8; i++)
//	{
//		for (int k = 0; k < 8; k++)
//		{
//			for (int m = 0; m < 8; m++)
//			{
//				C[8 * i + k] += A[8 * i + m] * B[8 * m + k];
//			}
//			C[8 * i + k] = C[8 * i + k] * 32768;
//		}
//	}
//
//	for (int i = 0; i < 64; i++)
//	{
//		RD0 = C[i];
//		M[RA2++] = RD0;
//	}
//
//	Return_AutoField(3 * MMU_BASE);		//压栈了三次，函数结尾处需推栈三次
//}


////////////////////////////////////////////////////////
//  名称:
//      Multi_Array_16X16
//  功能:
//      两个16X16矩阵相乘,数据格式为Q15
//  参数:
//      1.M[RSP+2*MMU_BASE]：输入矩阵A的首地址，q15
//      2.M[RSP+1*MMU_BASE]：输入矩阵B的首地址，q15
//      3.M[RSP+0*MMU_BASE]：输出矩阵的首地址，q16已限幅
//  返回值:
//      无
////////////////////////////////////////////////////////
Sub_AutoField Multi_Array_16x16
{
	RA0 = M[RSP + 2 * MMU_BASE];	//输入矩阵A的地址	
	RA1 = M[RSP + 1 * MMU_BASE];	//输入矩阵B的地址
	RA2 = M[RSP + 0 * MMU_BASE];	//输出地址
	short A[256], B[256], T[256];
	int C[256] = { 0 };
	int data[16];
	for (int i = 0; i < 256; i++)
	{
		RD0 = M[RA0++];
		A[i] = RD0.m_data;
	}
	for (int i = 0; i < 256; i++)
	{
		RD0 = M[RA1++];
		B[i] = RD0.m_data;
	}
	conv.Multi_Array(A, B, C);

	//RA1 = RN_GRAM0;
	for (int i = 0; i < 256; i++)
	{
		RD0 = C[i];
		M[RA2++] = RD0;
		//RD0 = T[i];
		//M[RA1++] = RD0;

	}
	Return_AutoField(3 * MMU_BASE);		
}

////////////////////////////////////////////////////////
//  名称:
//      Conv_2D_3X3
//  功能:
//      卷积核大小为3X3的二维卷积计算（卷积层高128*宽64）
//  参数:
//      1.M[RSP+2*MMU_BASE]：data地址,数据格式为Q15
//      2.M[RSP+1*MMU_BASE]：卷积滤波器系数存放地址,数据格式为Q15
//      3.M[RSP+0*MMU_BASE]：卷积结果地址,数据格式为Q7
//  返回值:
//      无
////////////////////////////////////////////////////////
Sub_AutoField Conv_2D_3X3
{
	RA0 = M[RSP + 2 * MMU_BASE];	//data地址
	RA1 = M[RSP + 1 * MMU_BASE];	//卷积滤波器系数存放地址
	RA2 = M[RSP + 0 * MMU_BASE];	//卷积结果地址

	int data[8976],key[25];
	for (int i = 0; i < 8192; i++)
	{
		RD0 = M[RA0++];
		data[i] = RD0.m_data;
	}
	for (int i = 0; i < 25; i++)
	{
		RD0 = M[RA1++];
		key[i] = RD0.m_data;
	}

	//3X3扩充为5X5
	//卷积核扩充
	conv.Conv_3X3to5X5(key);
	//扩充图像，扩充后为（128+4）*（64+4）
	conv.Extend_2D_Conv_5x5(data);
	//卷积乘
	conv.Conv_5x5(data, key);


	//结果放到输出指针
	for (int i = 0; i < 8192; i++)
	{
		RD0 = data[i];
		M[RA2++] = RD0;
	}

	Return_AutoField(3 * MMU_BASE);		//压栈了三次，函数结尾处需推栈三次

}

////////////////////////////////////////////////////////
//  名称:
//      Conv_2D_5X5
//  功能:
//      卷积核大小为5X5的二维卷积计算（卷积层高128*宽64）(补原值)
//  参数:
//      1.M[RSP+2*MMU_BASE]：data地址,数据格式为Q15
//      2.M[RSP+1*MMU_BASE]：卷积滤波器系数存放地址,数据格式为Q15
//      3.M[RSP+0*MMU_BASE]：卷积结果地址,数据格式为Q16,已限幅
//  返回值:
//      无
////////////////////////////////////////////////////////
Sub_AutoField Conv_2D_5X5
{
	RA0 = M[RSP + 2 * MMU_BASE];	//data地址
	RA1 = M[RSP + 1 * MMU_BASE];	//卷积滤波器系数存放地址
	RA2 = M[RSP + 0 * MMU_BASE];	//卷积结果地址

	int data[8976],key[25];
	for (int i = 0; i < 8192; i++)
	{
		RD0 = M[RA0++];
		data[i] = RD0.m_data;
	}
	for (int i = 0; i < 25; i++)
	{
		RD0 = M[RA1++];
		key[i] = RD0.m_data;
	}

	//扩充图像
	//扩充后为（128+4）*（64+4）
	conv.Extend_2D_Conv_5x5(data);

	//卷积乘
	conv.Conv_5x5(data, key);




	//结果放到输出指针
	for (int i = 0; i < 8192; i++)
	{
		RD0 = data[i];
		M[RA2++] = RD0;
	}

	Return_AutoField(3 * MMU_BASE);		//压栈了三次，函数结尾处需推栈三次
}

////////////////////////////////////////////////////////
//  名称:
//      Conv_2D_5X5_2(暂不开放)
//  功能:
//      卷积核大小为5X5的二维卷积计算（卷积层宽256*高64）(边上补0)
//  参数:
//      1.M[RSP+2*MMU_BASE]：data地址,数据格式为Q15
//      2.M[RSP+1*MMU_BASE]：卷积滤波器系数存放地址
//      3.M[RSP+0*MMU_BASE]：卷积结果地址,数据格式为Q16,已限幅
//  返回值:
//      无
////////////////////////////////////////////////////////
Sub_AutoField Conv_2D_5X5_2
{
	RA0 = M[RSP + 2 * MMU_BASE];	//data地址
	RA1 = M[RSP + 1 * MMU_BASE];	//卷积滤波器系数存放地址
	RA2 = M[RSP + 0 * MMU_BASE];	//卷积结果地址

	int data[17680],key[25];
	for (int i = 0; i < 16384; i++)
	{
		RD0 = M[RA0++];
		data[i] = RD0.m_data;
	}
	for (int i = 0; i < 25; i++)
	{
		RD0 = M[RA1++];
		key[i] = RD0.m_data;
	}

	//扩充图像
	//扩充后为（256+4）*（64+4）
	conv.Extend_2D_Conv_5x5_2(data);

	//卷积乘
	conv.Conv_5x5_2(data, key);




	//结果放到输出指针
	for (int i = 0; i < 16384; i++)
	{
		RD0 = data[i];
		M[RA2++] = RD0;
	}

	Return_AutoField(3 * MMU_BASE);		//压栈了三次，函数结尾处需推栈三次
}



////////////////////////////////////////////////////////
//  名称:
//      ReLU
//  功能:
//      ReLU激活函数
//  参数:
//      1.M[RSP+2*MMU_BASE]：输入地址
//      2.M[RSP+1*MMU_BASE]：输出地址
//      3.M[RSP+0*MMU_BASE]：数据长度
//  返回值:
//      无
////////////////////////////////////////////////////////
Sub_AutoField ReLU
{
	RA0 = M[RSP + 2 * MMU_BASE];	
	RA1 = M[RSP + 1 * MMU_BASE];	
	RD0 = M[RSP + 0 * MMU_BASE];	

	int n = RD0.m_data;
	for (int i = 0; i < n; i++)
	{
		RD0 = M[RA0++];
		if (RD0 < 0)
			RD0 = 0;
		M[RA1++] = RD0;
	}


	Return_AutoField(3 * MMU_BASE);		

}


////////////////////////////////////////////////////////
//  名称:
//      Softmax
//  功能:
//      Softmax函数，q15
//  参数:
//      1.M[RSP+2*MMU_BASE]：输入地址
//      2.M[RSP+1*MMU_BASE]：输出地址
//      3.M[RSP+0*MMU_BASE]：数据长度
//  返回值:
//      无
////////////////////////////////////////////////////////
Sub_AutoField Softmax
{
	RA0 = M[RSP + 2 * MMU_BASE];
	RA1 = M[RSP + 1 * MMU_BASE];
	RD0 = M[RSP + 0 * MMU_BASE];

	int n = RD0.m_data;
	double data[10];
	double c = 0;
	double r = 0;

	for (int i = 0; i < n; i++)
	{
		RD0 = M[RA0++];
		data[i] = RD0.m_data;
		data[i] = data[i] / 32767;
	}

	//计算exp累加和
	for (int i = 0; i < n; i++)
	{
		c += exp(data[i]);
	}

	for (int i = 0; i < n; i++)
	{
		r = exp(data[i]);
		r = 32767 * r / c;
		RD0 = r;
		M[RA1++] = RD0;
	}


	Return_AutoField(3 * MMU_BASE);

}

////////////////////////////////////////////////////////
//  名称:
//      Logistic
//  功能:
//      Logistic函数，q15
//  参数:
//      1.M[RSP+2*MMU_BASE]：输入地址
//      2.M[RSP+1*MMU_BASE]：输出地址
//      3.M[RSP+0*MMU_BASE]：数据长度
//  返回值:
//      无
////////////////////////////////////////////////////////
Sub_AutoField Logistic
{
	RA0 = M[RSP + 2 * MMU_BASE];
	RA1 = M[RSP + 1 * MMU_BASE];
	RD0 = M[RSP + 0 * MMU_BASE];

	//查表法
	int tab[2048] = { 0x3fff, 0x4007, 0x400f, 0x4017, 0x401f, 0x4027, 0x402f, 0x4037, 0x403f, 0x4047, 0x404f, 0x4057, 0x405f, 0x4067, 0x406f, 0x4077, 0x407f, 0x4087, 0x408f, 0x4097, 0x409f, 0x40a7, 0x40af, 0x40b7, 0x40bf, 0x40c7, 0x40cf, 0x40d7, 0x40df, 0x40e7, 0x40ef, 0x40f7, 0x40ff, 0x4107, 0x410f, 0x4117, 0x411f, 0x4127, 0x412f, 0x4137, 0x413f, 0x4147, 0x414f, 0x4157, 0x415f, 0x4167, 0x416f, 0x4177, 0x417f, 0x4187, 0x418f, 0x4197, 0x419f, 0x41a7, 0x41af, 0x41b7, 0x41bf, 0x41c7, 0x41cf, 0x41d7, 0x41df, 0x41e7, 0x41ef, 0x41f7, 0x41ff, 0x4207, 0x420f, 0x4217, 0x421f, 0x4227, 0x422f, 0x4237, 0x423f, 0x4247, 0x424f, 0x4257, 0x425f, 0x4267, 0x426f, 0x4277, 0x427f, 0x4287, 0x428f, 0x4297, 0x429f, 0x42a7, 0x42af, 0x42b7, 0x42bf, 0x42c7, 0x42cf, 0x42d7, 0x42df, 0x42e6, 0x42ee, 0x42f6, 0x42fe, 0x4306, 0x430e, 0x4316, 0x431e, 0x4326, 0x432e, 0x4336, 0x433e, 0x4346, 0x434e, 0x4356, 0x435e, 0x4366, 0x436e, 0x4376, 0x437e, 0x4386, 0x438e, 0x4396, 0x439e, 0x43a6, 0x43ae, 0x43b6, 0x43be, 0x43c6, 0x43ce, 0x43d6, 0x43de, 0x43e6, 0x43ee, 0x43f6, 0x43fe, 0x4406, 0x440e, 0x4416, 0x441e, 0x4426, 0x442d, 0x4435, 0x443d, 0x4445, 0x444d, 0x4455, 0x445d, 0x4465, 0x446d, 0x4475, 0x447d, 0x4485, 0x448d, 0x4495, 0x449d, 0x44a5, 0x44ad, 0x44b5, 0x44bd, 0x44c5, 0x44cd, 0x44d5, 0x44dd, 0x44e5, 0x44ec, 0x44f4, 0x44fc, 0x4504, 0x450c, 0x4514, 0x451c, 0x4524, 0x452c, 0x4534, 0x453c, 0x4544, 0x454c, 0x4554, 0x455c, 0x4564, 0x456c, 0x4574, 0x457c, 0x4583, 0x458b, 0x4593, 0x459b, 0x45a3, 0x45ab, 0x45b3, 0x45bb, 0x45c3, 0x45cb, 0x45d3, 0x45db, 0x45e3, 0x45eb, 0x45f3, 0x45fb, 0x4602, 0x460a, 0x4612, 0x461a, 0x4622, 0x462a, 0x4632, 0x463a, 0x4642, 0x464a, 0x4652, 0x465a, 0x4662, 0x4669, 0x4671, 0x4679, 0x4681, 0x4689, 0x4691, 0x4699, 0x46a1, 0x46a9, 0x46b1, 0x46b9, 0x46c1, 0x46c8, 0x46d0, 0x46d8, 0x46e0, 0x46e8, 0x46f0, 0x46f8, 0x4700, 0x4708, 0x4710, 0x4718, 0x471f, 0x4727, 0x472f, 0x4737, 0x473f, 0x4747, 0x474f, 0x4757, 0x475f, 0x4766, 0x476e, 0x4776, 0x477e, 0x4786, 0x478e, 0x4796, 0x479e, 0x47a6, 0x47ad, 0x47b5, 0x47bd, 0x47c5, 0x47cd, 0x47d5, 0x47dd, 0x47e5, 0x47ed, 0x47f4, 0x47fc, 0x4804, 0x480c, 0x4814, 0x481c, 0x4824, 0x482c, 0x4833, 0x483b, 0x4843, 0x484b, 0x4853, 0x485b, 0x4863, 0x486a, 0x4872, 0x487a, 0x4882, 0x488a, 0x4892, 0x489a, 0x48a1, 0x48a9, 0x48b1, 0x48b9, 0x48c1, 0x48c9, 0x48d1, 0x48d8, 0x48e0, 0x48e8, 0x48f0, 0x48f8, 0x4900, 0x4907, 0x490f, 0x4917, 0x491f, 0x4927, 0x492f, 0x4936, 0x493e, 0x4946, 0x494e, 0x4956, 0x495e, 0x4965, 0x496d, 0x4975, 0x497d, 0x4985, 0x498d, 0x4994, 0x499c, 0x49a4, 0x49ac, 0x49b4, 0x49bb, 0x49c3, 0x49cb, 0x49d3, 0x49db, 0x49e3, 0x49ea, 0x49f2, 0x49fa, 0x4a02, 0x4a0a, 0x4a11, 0x4a19, 0x4a21, 0x4a29, 0x4a31, 0x4a38, 0x4a40, 0x4a48, 0x4a50, 0x4a58, 0x4a5f, 0x4a67, 0x4a6f, 0x4a77, 0x4a7e, 0x4a86, 0x4a8e, 0x4a96, 0x4a9e, 0x4aa5, 0x4aad, 0x4ab5, 0x4abd, 0x4ac5, 0x4acc, 0x4ad4, 0x4adc, 0x4ae4, 0x4aeb, 0x4af3, 0x4afb, 0x4b03, 0x4b0a, 0x4b12, 0x4b1a, 0x4b22, 0x4b29, 0x4b31, 0x4b39, 0x4b41, 0x4b48, 0x4b50, 0x4b58, 0x4b60, 0x4b67, 0x4b6f, 0x4b77, 0x4b7f, 0x4b86, 0x4b8e, 0x4b96, 0x4b9e, 0x4ba5, 0x4bad, 0x4bb5, 0x4bbd, 0x4bc4, 0x4bcc, 0x4bd4, 0x4bdb, 0x4be3, 0x4beb, 0x4bf3, 0x4bfa, 0x4c02, 0x4c0a, 0x4c12, 0x4c19, 0x4c21, 0x4c29, 0x4c30, 0x4c38, 0x4c40, 0x4c48, 0x4c4f, 0x4c57, 0x4c5f, 0x4c66, 0x4c6e, 0x4c76, 0x4c7d, 0x4c85, 0x4c8d, 0x4c94, 0x4c9c, 0x4ca4, 0x4cac, 0x4cb3, 0x4cbb, 0x4cc3, 0x4cca, 0x4cd2, 0x4cda, 0x4ce1, 0x4ce9, 0x4cf1, 0x4cf8, 0x4d00, 0x4d08, 0x4d0f, 0x4d17, 0x4d1f, 0x4d26, 0x4d2e, 0x4d36, 0x4d3d, 0x4d45, 0x4d4d, 0x4d54, 0x4d5c, 0x4d64, 0x4d6b, 0x4d73, 0x4d7b, 0x4d82, 0x4d8a, 0x4d91, 0x4d99, 0x4da1, 0x4da8, 0x4db0, 0x4db8, 0x4dbf, 0x4dc7, 0x4dcf, 0x4dd6, 0x4dde, 0x4de5, 0x4ded, 0x4df5, 0x4dfc, 0x4e04, 0x4e0b, 0x4e13, 0x4e1b, 0x4e22, 0x4e2a, 0x4e32, 0x4e39, 0x4e41, 0x4e48, 0x4e50, 0x4e58, 0x4e5f, 0x4e67, 0x4e6e, 0x4e76, 0x4e7e, 0x4e85, 0x4e8d, 0x4e94, 0x4e9c, 0x4ea3, 0x4eab, 0x4eb3, 0x4eba, 0x4ec2, 0x4ec9, 0x4ed1, 0x4ed8, 0x4ee0, 0x4ee8, 0x4eef, 0x4ef7, 0x4efe, 0x4f06, 0x4f0d, 0x4f15, 0x4f1d, 0x4f24, 0x4f2c, 0x4f33, 0x4f3b, 0x4f42, 0x4f4a, 0x4f51, 0x4f59, 0x4f60, 0x4f68, 0x4f70, 0x4f77, 0x4f7f, 0x4f86, 0x4f8e, 0x4f95, 0x4f9d, 0x4fa4, 0x4fac, 0x4fb3, 0x4fbb, 0x4fc2, 0x4fca, 0x4fd1, 0x4fd9, 0x4fe0, 0x4fe8, 0x4fef, 0x4ff7, 0x4ffe, 0x5006, 0x500d, 0x5015, 0x501c, 0x5024, 0x502b, 0x5033, 0x503a, 0x5042, 0x5049, 0x5051, 0x5058, 0x5060, 0x5067, 0x506f, 0x5076, 0x507e, 0x5085, 0x508d, 0x5094, 0x509b, 0x50a3, 0x50aa, 0x50b2, 0x50b9, 0x50c1, 0x50c8, 0x50d0, 0x50d7, 0x50df, 0x50e6, 0x50ed, 0x50f5, 0x50fc, 0x5104, 0x510b, 0x5113, 0x511a, 0x5121, 0x5129, 0x5130, 0x5138, 0x513f, 0x5147, 0x514e, 0x5155, 0x515d, 0x5164, 0x516c, 0x5173, 0x517a, 0x5182, 0x5189, 0x5191, 0x5198, 0x519f, 0x51a7, 0x51ae, 0x51b6, 0x51bd, 0x51c4, 0x51cc, 0x51d3, 0x51da, 0x51e2, 0x51e9, 0x51f1, 0x51f8, 0x51ff, 0x5207, 0x520e, 0x5215, 0x521d, 0x5224, 0x522c, 0x5233, 0x523a, 0x5242, 0x5249, 0x5250, 0x5258, 0x525f, 0x5266, 0x526e, 0x5275, 0x527c, 0x5284, 0x528b, 0x5292, 0x529a, 0x52a1, 0x52a8, 0x52b0, 0x52b7, 0x52be, 0x52c6, 0x52cd, 0x52d4, 0x52db, 0x52e3, 0x52ea, 0x52f1, 0x52f9, 0x5300, 0x5307, 0x530f, 0x5316, 0x531d, 0x5324, 0x532c, 0x5333, 0x533a, 0x5342, 0x5349, 0x5350, 0x5357, 0x535f, 0x5366, 0x536d, 0x5374, 0x537c, 0x5383, 0x538a, 0x5391, 0x5399, 0x53a0, 0x53a7, 0x53ae, 0x53b6, 0x53bd, 0x53c4, 0x53cb, 0x53d3, 0x53da, 0x53e1, 0x53e8, 0x53ef, 0x53f7, 0x53fe, 0x5405, 0x540c, 0x5414, 0x541b, 0x5422, 0x5429, 0x5430, 0x5438, 0x543f, 0x5446, 0x544d, 0x5454, 0x545c, 0x5463, 0x546a, 0x5471, 0x5478, 0x5480, 0x5487, 0x548e, 0x5495, 0x549c, 0x54a3, 0x54ab, 0x54b2, 0x54b9, 0x54c0, 0x54c7, 0x54ce, 0x54d6, 0x54dd, 0x54e4, 0x54eb, 0x54f2, 0x54f9, 0x5500, 0x5508, 0x550f, 0x5516, 0x551d, 0x5524, 0x552b, 0x5532, 0x5539, 0x5541, 0x5548, 0x554f, 0x5556, 0x555d, 0x5564, 0x556b, 0x5572, 0x5579, 0x5580, 0x5588, 0x558f, 0x5596, 0x559d, 0x55a4, 0x55ab, 0x55b2, 0x55b9, 0x55c0, 0x55c7, 0x55ce, 0x55d5, 0x55dd, 0x55e4, 0x55eb, 0x55f2, 0x55f9, 0x5600, 0x5607, 0x560e, 0x5615, 0x561c, 0x5623, 0x562a, 0x5631, 0x5638, 0x563f, 0x5646, 0x564d, 0x5654, 0x565b, 0x5662, 0x5669, 0x5670, 0x5677, 0x567e, 0x5685, 0x568c, 0x5693, 0x569a, 0x56a1, 0x56a8, 0x56af, 0x56b6, 0x56bd, 0x56c4, 0x56cb, 0x56d2, 0x56d9, 0x56e0, 0x56e7, 0x56ee, 0x56f5, 0x56fc, 0x5703, 0x570a, 0x5711, 0x5718, 0x571f, 0x5726, 0x572d, 0x5734, 0x573b, 0x5742, 0x5749, 0x5750, 0x5757, 0x575e, 0x5764, 0x576b, 0x5772, 0x5779, 0x5780, 0x5787, 0x578e, 0x5795, 0x579c, 0x57a3, 0x57aa, 0x57b1, 0x57b7, 0x57be, 0x57c5, 0x57cc, 0x57d3, 0x57da, 0x57e1, 0x57e8, 0x57ef, 0x57f5, 0x57fc, 0x5803, 0x580a, 0x5811, 0x5818, 0x581f, 0x5826, 0x582c, 0x5833, 0x583a, 0x5841, 0x5848, 0x584f, 0x5856, 0x585c, 0x5863, 0x586a, 0x5871, 0x5878, 0x587f, 0x5885, 0x588c, 0x5893, 0x589a, 0x58a1, 0x58a7, 0x58ae, 0x58b5, 0x58bc, 0x58c3, 0x58ca, 0x58d0, 0x58d7, 0x58de, 0x58e5, 0x58eb, 0x58f2, 0x58f9, 0x5900, 0x5907, 0x590d, 0x5914, 0x591b, 0x5922, 0x5928, 0x592f, 0x5936, 0x593d, 0x5943, 0x594a, 0x5951, 0x5958, 0x595e, 0x5965, 0x596c, 0x5973, 0x5979, 0x5980, 0x5987, 0x598e, 0x5994, 0x599b, 0x59a2, 0x59a8, 0x59af, 0x59b6, 0x59bd, 0x59c3, 0x59ca, 0x59d1, 0x59d7, 0x59de, 0x59e5, 0x59eb, 0x59f2, 0x59f9, 0x5a00, 0x5a06, 0x5a0d, 0x5a14, 0x5a1a, 0x5a21, 0x5a28, 0x5a2e, 0x5a35, 0x5a3c, 0x5a42, 0x5a49, 0x5a4f, 0x5a56, 0x5a5d, 0x5a63, 0x5a6a, 0x5a71, 0x5a77, 0x5a7e, 0x5a85, 0x5a8b, 0x5a92, 0x5a98, 0x5a9f, 0x5aa6, 0x5aac, 0x5ab3, 0x5aba, 0x5ac0, 0x5ac7, 0x5acd, 0x5ad4, 0x5ada, 0x5ae1, 0x5ae8, 0x5aee, 0x5af5, 0x5afb, 0x5b02, 0x5b09, 0x5b0f, 0x5b16, 0x5b1c, 0x5b23, 0x5b29, 0x5b30, 0x5b37, 0x5b3d, 0x5b44, 0x5b4a, 0x5b51, 0x5b57, 0x5b5e, 0x5b64, 0x5b6b, 0x5b71, 0x5b78, 0x5b7e, 0x5b85, 0x5b8b, 0x5b92, 0x5b98, 0x5b9f, 0x5ba6, 0x5bac, 0x5bb3, 0x5bb9, 0x5bc0, 0x5bc6, 0x5bcd, 0x5bd3, 0x5bd9, 0x5be0, 0x5be6, 0x5bed, 0x5bf3, 0x5bfa, 0x5c00, 0x5c07, 0x5c0d, 0x5c14, 0x5c1a, 0x5c21, 0x5c27, 0x5c2e, 0x5c34, 0x5c3a, 0x5c41, 0x5c47, 0x5c4e, 0x5c54, 0x5c5b, 0x5c61, 0x5c67, 0x5c6e, 0x5c74, 0x5c7b, 0x5c81, 0x5c88, 0x5c8e, 0x5c94, 0x5c9b, 0x5ca1, 0x5ca8, 0x5cae, 0x5cb4, 0x5cbb, 0x5cc1, 0x5cc8, 0x5cce, 0x5cd4, 0x5cdb, 0x5ce1, 0x5ce7, 0x5cee, 0x5cf4, 0x5cfa, 0x5d01, 0x5d07, 0x5d0e, 0x5d14, 0x5d1a, 0x5d21, 0x5d27, 0x5d2d, 0x5d34, 0x5d3a, 0x5d40, 0x5d47, 0x5d4d, 0x5d53, 0x5d5a, 0x5d60, 0x5d66, 0x5d6c, 0x5d73, 0x5d79, 0x5d7f, 0x5d86, 0x5d8c, 0x226c, 0x2272, 0x2278, 0x227f, 0x2285, 0x228b, 0x2292, 0x2298, 0x229e, 0x22a4, 0x22ab, 0x22b1, 0x22b7, 0x22be, 0x22c4, 0x22ca, 0x22d1, 0x22d7, 0x22dd, 0x22e4, 0x22ea, 0x22f0, 0x22f7, 0x22fd, 0x2304, 0x230a, 0x2310, 0x2317, 0x231d, 0x2323, 0x232a, 0x2330, 0x2336, 0x233d, 0x2343, 0x234a, 0x2350, 0x2356, 0x235d, 0x2363, 0x236a, 0x2370, 0x2376, 0x237d, 0x2383, 0x238a, 0x2390, 0x2397, 0x239d, 0x23a3, 0x23aa, 0x23b0, 0x23b7, 0x23bd, 0x23c4, 0x23ca, 0x23d0, 0x23d7, 0x23dd, 0x23e4, 0x23ea, 0x23f1, 0x23f7, 0x23fe, 0x2404, 0x240b, 0x2411, 0x2418, 0x241e, 0x2425, 0x242b, 0x2431, 0x2438, 0x243e, 0x2445, 0x244b, 0x2452, 0x2458, 0x245f, 0x2466, 0x246c, 0x2473, 0x2479, 0x2480, 0x2486, 0x248d, 0x2493, 0x249a, 0x24a0, 0x24a7, 0x24ad, 0x24b4, 0x24ba, 0x24c1, 0x24c7, 0x24ce, 0x24d5, 0x24db, 0x24e2, 0x24e8, 0x24ef, 0x24f5, 0x24fc, 0x2503, 0x2509, 0x2510, 0x2516, 0x251d, 0x2524, 0x252a, 0x2531, 0x2537, 0x253e, 0x2544, 0x254b, 0x2552, 0x2558, 0x255f, 0x2566, 0x256c, 0x2573, 0x2579, 0x2580, 0x2587, 0x258d, 0x2594, 0x259b, 0x25a1, 0x25a8, 0x25af, 0x25b5, 0x25bc, 0x25c2, 0x25c9, 0x25d0, 0x25d6, 0x25dd, 0x25e4, 0x25ea, 0x25f1, 0x25f8, 0x25fe, 0x2605, 0x260c, 0x2613, 0x2619, 0x2620, 0x2627, 0x262d, 0x2634, 0x263b, 0x2641, 0x2648, 0x264f, 0x2656, 0x265c, 0x2663, 0x266a, 0x2670, 0x2677, 0x267e, 0x2685, 0x268b, 0x2692, 0x2699, 0x26a0, 0x26a6, 0x26ad, 0x26b4, 0x26bb, 0x26c1, 0x26c8, 0x26cf, 0x26d6, 0x26dc, 0x26e3, 0x26ea, 0x26f1, 0x26f7, 0x26fe, 0x2705, 0x270c, 0x2713, 0x2719, 0x2720, 0x2727, 0x272e, 0x2734, 0x273b, 0x2742, 0x2749, 0x2750, 0x2757, 0x275d, 0x2764, 0x276b, 0x2772, 0x2779, 0x277f, 0x2786, 0x278d, 0x2794, 0x279b, 0x27a2, 0x27a8, 0x27af, 0x27b6, 0x27bd, 0x27c4, 0x27cb, 0x27d2, 0x27d8, 0x27df, 0x27e6, 0x27ed, 0x27f4, 0x27fb, 0x2802, 0x2809, 0x280f, 0x2816, 0x281d, 0x2824, 0x282b, 0x2832, 0x2839, 0x2840, 0x2847, 0x284d, 0x2854, 0x285b, 0x2862, 0x2869, 0x2870, 0x2877, 0x287e, 0x2885, 0x288c, 0x2893, 0x289a, 0x28a0, 0x28a7, 0x28ae, 0x28b5, 0x28bc, 0x28c3, 0x28ca, 0x28d1, 0x28d8, 0x28df, 0x28e6, 0x28ed, 0x28f4, 0x28fb, 0x2902, 0x2909, 0x2910, 0x2917, 0x291e, 0x2925, 0x292c, 0x2933, 0x293a, 0x2941, 0x2948, 0x294f, 0x2956, 0x295d, 0x2964, 0x296b, 0x2972, 0x2979, 0x2980, 0x2987, 0x298e, 0x2995, 0x299c, 0x29a3, 0x29aa, 0x29b1, 0x29b8, 0x29bf, 0x29c6, 0x29cd, 0x29d4, 0x29db, 0x29e2, 0x29e9, 0x29f0, 0x29f7, 0x29fe, 0x2a05, 0x2a0c, 0x2a13, 0x2a1a, 0x2a21, 0x2a29, 0x2a30, 0x2a37, 0x2a3e, 0x2a45, 0x2a4c, 0x2a53, 0x2a5a, 0x2a61, 0x2a68, 0x2a6f, 0x2a76, 0x2a7e, 0x2a85, 0x2a8c, 0x2a93, 0x2a9a, 0x2aa1, 0x2aa8, 0x2aaf, 0x2ab6, 0x2abd, 0x2ac5, 0x2acc, 0x2ad3, 0x2ada, 0x2ae1, 0x2ae8, 0x2aef, 0x2af6, 0x2afe, 0x2b05, 0x2b0c, 0x2b13, 0x2b1a, 0x2b21, 0x2b28, 0x2b30, 0x2b37, 0x2b3e, 0x2b45, 0x2b4c, 0x2b53, 0x2b5b, 0x2b62, 0x2b69, 0x2b70, 0x2b77, 0x2b7e, 0x2b86, 0x2b8d, 0x2b94, 0x2b9b, 0x2ba2, 0x2baa, 0x2bb1, 0x2bb8, 0x2bbf, 0x2bc6, 0x2bce, 0x2bd5, 0x2bdc, 0x2be3, 0x2bea, 0x2bf2, 0x2bf9, 0x2c00, 0x2c07, 0x2c0f, 0x2c16, 0x2c1d, 0x2c24, 0x2c2b, 0x2c33, 0x2c3a, 0x2c41, 0x2c48, 0x2c50, 0x2c57, 0x2c5e, 0x2c65, 0x2c6d, 0x2c74, 0x2c7b, 0x2c82, 0x2c8a, 0x2c91, 0x2c98, 0x2c9f, 0x2ca7, 0x2cae, 0x2cb5, 0x2cbc, 0x2cc4, 0x2ccb, 0x2cd2, 0x2cda, 0x2ce1, 0x2ce8, 0x2cef, 0x2cf7, 0x2cfe, 0x2d05, 0x2d0d, 0x2d14, 0x2d1b, 0x2d23, 0x2d2a, 0x2d31, 0x2d38, 0x2d40, 0x2d47, 0x2d4e, 0x2d56, 0x2d5d, 0x2d64, 0x2d6c, 0x2d73, 0x2d7a, 0x2d82, 0x2d89, 0x2d90, 0x2d98, 0x2d9f, 0x2da6, 0x2dae, 0x2db5, 0x2dbc, 0x2dc4, 0x2dcb, 0x2dd2, 0x2dda, 0x2de1, 0x2de9, 0x2df0, 0x2df7, 0x2dff, 0x2e06, 0x2e0d, 0x2e15, 0x2e1c, 0x2e24, 0x2e2b, 0x2e32, 0x2e3a, 0x2e41, 0x2e48, 0x2e50, 0x2e57, 0x2e5f, 0x2e66, 0x2e6d, 0x2e75, 0x2e7c, 0x2e84, 0x2e8b, 0x2e92, 0x2e9a, 0x2ea1, 0x2ea9, 0x2eb0, 0x2eb7, 0x2ebf, 0x2ec6, 0x2ece, 0x2ed5, 0x2edd, 0x2ee4, 0x2eeb, 0x2ef3, 0x2efa, 0x2f02, 0x2f09, 0x2f11, 0x2f18, 0x2f1f, 0x2f27, 0x2f2e, 0x2f36, 0x2f3d, 0x2f45, 0x2f4c, 0x2f54, 0x2f5b, 0x2f63, 0x2f6a, 0x2f71, 0x2f79, 0x2f80, 0x2f88, 0x2f8f, 0x2f97, 0x2f9e, 0x2fa6, 0x2fad, 0x2fb5, 0x2fbc, 0x2fc4, 0x2fcb, 0x2fd3, 0x2fda, 0x2fe2, 0x2fe9, 0x2ff1, 0x2ff8, 0x3000, 0x3007, 0x300f, 0x3016, 0x301e, 0x3025, 0x302d, 0x3034, 0x303c, 0x3043, 0x304b, 0x3052, 0x305a, 0x3061, 0x3069, 0x3070, 0x3078, 0x307f, 0x3087, 0x308e, 0x3096, 0x309e, 0x30a5, 0x30ad, 0x30b4, 0x30bc, 0x30c3, 0x30cb, 0x30d2, 0x30da, 0x30e1, 0x30e9, 0x30f1, 0x30f8, 0x3100, 0x3107, 0x310f, 0x3116, 0x311e, 0x3126, 0x312d, 0x3135, 0x313c, 0x3144, 0x314b, 0x3153, 0x315b, 0x3162, 0x316a, 0x3171, 0x3179, 0x3180, 0x3188, 0x3190, 0x3197, 0x319f, 0x31a6, 0x31ae, 0x31b6, 0x31bd, 0x31c5, 0x31cc, 0x31d4, 0x31dc, 0x31e3, 0x31eb, 0x31f3, 0x31fa, 0x3202, 0x3209, 0x3211, 0x3219, 0x3220, 0x3228, 0x322f, 0x3237, 0x323f, 0x3246, 0x324e, 0x3256, 0x325d, 0x3265, 0x326d, 0x3274, 0x327c, 0x3283, 0x328b, 0x3293, 0x329a, 0x32a2, 0x32aa, 0x32b1, 0x32b9, 0x32c1, 0x32c8, 0x32d0, 0x32d8, 0x32df, 0x32e7, 0x32ef, 0x32f6, 0x32fe, 0x3306, 0x330d, 0x3315, 0x331d, 0x3324, 0x332c, 0x3334, 0x333b, 0x3343, 0x334b, 0x3352, 0x335a, 0x3362, 0x336a, 0x3371, 0x3379, 0x3381, 0x3388, 0x3390, 0x3398, 0x339f, 0x33a7, 0x33af, 0x33b6, 0x33be, 0x33c6, 0x33ce, 0x33d5, 0x33dd, 0x33e5, 0x33ec, 0x33f4, 0x33fc, 0x3404, 0x340b, 0x3413, 0x341b, 0x3423, 0x342a, 0x3432, 0x343a, 0x3441, 0x3449, 0x3451, 0x3459, 0x3460, 0x3468, 0x3470, 0x3478, 0x347f, 0x3487, 0x348f, 0x3497, 0x349e, 0x34a6, 0x34ae, 0x34b6, 0x34bd, 0x34c5, 0x34cd, 0x34d5, 0x34dc, 0x34e4, 0x34ec, 0x34f4, 0x34fb, 0x3503, 0x350b, 0x3513, 0x351a, 0x3522, 0x352a, 0x3532, 0x3539, 0x3541, 0x3549, 0x3551, 0x3559, 0x3560, 0x3568, 0x3570, 0x3578, 0x3580, 0x3587, 0x358f, 0x3597, 0x359f, 0x35a6, 0x35ae, 0x35b6, 0x35be, 0x35c6, 0x35cd, 0x35d5, 0x35dd, 0x35e5, 0x35ed, 0x35f4, 0x35fc, 0x3604, 0x360c, 0x3614, 0x361b, 0x3623, 0x362b, 0x3633, 0x363b, 0x3643, 0x364a, 0x3652, 0x365a, 0x3662, 0x366a, 0x3671, 0x3679, 0x3681, 0x3689, 0x3691, 0x3699, 0x36a0, 0x36a8, 0x36b0, 0x36b8, 0x36c0, 0x36c8, 0x36cf, 0x36d7, 0x36df, 0x36e7, 0x36ef, 0x36f7, 0x36fe, 0x3706, 0x370e, 0x3716, 0x371e, 0x3726, 0x372d, 0x3735, 0x373d, 0x3745, 0x374d, 0x3755, 0x375d, 0x3764, 0x376c, 0x3774, 0x377c, 0x3784, 0x378c, 0x3794, 0x379b, 0x37a3, 0x37ab, 0x37b3, 0x37bb, 0x37c3, 0x37cb, 0x37d2, 0x37da, 0x37e2, 0x37ea, 0x37f2, 0x37fa, 0x3802, 0x380a, 0x3811, 0x3819, 0x3821, 0x3829, 0x3831, 0x3839, 0x3841, 0x3849, 0x3851, 0x3858, 0x3860, 0x3868, 0x3870, 0x3878, 0x3880, 0x3888, 0x3890, 0x3898, 0x389f, 0x38a7, 0x38af, 0x38b7, 0x38bf, 0x38c7, 0x38cf, 0x38d7, 0x38df, 0x38e6, 0x38ee, 0x38f6, 0x38fe, 0x3906, 0x390e, 0x3916, 0x391e, 0x3926, 0x392e, 0x3936, 0x393d, 0x3945, 0x394d, 0x3955, 0x395d, 0x3965, 0x396d, 0x3975, 0x397d, 0x3985, 0x398d, 0x3995, 0x399c, 0x39a4, 0x39ac, 0x39b4, 0x39bc, 0x39c4, 0x39cc, 0x39d4, 0x39dc, 0x39e4, 0x39ec, 0x39f4, 0x39fc, 0x3a03, 0x3a0b, 0x3a13, 0x3a1b, 0x3a23, 0x3a2b, 0x3a33, 0x3a3b, 0x3a43, 0x3a4b, 0x3a53, 0x3a5b, 0x3a63, 0x3a6b, 0x3a73, 0x3a7b, 0x3a82, 0x3a8a, 0x3a92, 0x3a9a, 0x3aa2, 0x3aaa, 0x3ab2, 0x3aba, 0x3ac2, 0x3aca, 0x3ad2, 0x3ada, 0x3ae2, 0x3aea, 0x3af2, 0x3afa, 0x3b02, 0x3b0a, 0x3b12, 0x3b19, 0x3b21, 0x3b29, 0x3b31, 0x3b39, 0x3b41, 0x3b49, 0x3b51, 0x3b59, 0x3b61, 0x3b69, 0x3b71, 0x3b79, 0x3b81, 0x3b89, 0x3b91, 0x3b99, 0x3ba1, 0x3ba9, 0x3bb1, 0x3bb9, 0x3bc1, 0x3bc9, 0x3bd1, 0x3bd8, 0x3be0, 0x3be8, 0x3bf0, 0x3bf8, 0x3c00, 0x3c08, 0x3c10, 0x3c18, 0x3c20, 0x3c28, 0x3c30, 0x3c38, 0x3c40, 0x3c48, 0x3c50, 0x3c58, 0x3c60, 0x3c68, 0x3c70, 0x3c78, 0x3c80, 0x3c88, 0x3c90, 0x3c98, 0x3ca0, 0x3ca8, 0x3cb0, 0x3cb8, 0x3cc0, 0x3cc8, 0x3cd0, 0x3cd8, 0x3ce0, 0x3ce8, 0x3cf0, 0x3cf8, 0x3d00, 0x3d08, 0x3d10, 0x3d18, 0x3d1f, 0x3d27, 0x3d2f, 0x3d37, 0x3d3f, 0x3d47, 0x3d4f, 0x3d57, 0x3d5f, 0x3d67, 0x3d6f, 0x3d77, 0x3d7f, 0x3d87, 0x3d8f, 0x3d97, 0x3d9f, 0x3da7, 0x3daf, 0x3db7, 0x3dbf, 0x3dc7, 0x3dcf, 0x3dd7, 0x3ddf, 0x3de7, 0x3def, 0x3df7, 0x3dff, 0x3e07, 0x3e0f, 0x3e17, 0x3e1f, 0x3e27, 0x3e2f, 0x3e37, 0x3e3f, 0x3e47, 0x3e4f, 0x3e57, 0x3e5f, 0x3e67, 0x3e6f, 0x3e77, 0x3e7f, 0x3e87, 0x3e8f, 0x3e97, 0x3e9f, 0x3ea7, 0x3eaf, 0x3eb7, 0x3ebf, 0x3ec7, 0x3ecf, 0x3ed7, 0x3edf, 0x3ee7, 0x3eef, 0x3ef7, 0x3eff, 0x3f07, 0x3f0f, 0x3f17, 0x3f1f, 0x3f27, 0x3f2f, 0x3f37, 0x3f3f, 0x3f47, 0x3f4f, 0x3f57, 0x3f5f, 0x3f67, 0x3f6f, 0x3f77, 0x3f7f, 0x3f87, 0x3f8f, 0x3f97, 0x3f9f, 0x3fa7, 0x3faf, 0x3fb7, 0x3fbf, 0x3fc7, 0x3fcf, 0x3fd7, 0x3fdf, 0x3fe7, 0x3fef, 0x3ff7 };
	int len = RD0.m_data;
	for (int i = 0; i < len; i++)
	{
		RD0 = M[RA0++];
		unsigned int x = RD0.m_data;
		x = x >> 5;
		RD1 = tab[x];
		M[RA1++] = RD1;
	}



	////标准公式
	//int len = RD0.m_data;
	//double x;
	//for (int i = 0; i < len; i++)
	//{
	//	RD0 = M[RA0++];
	//	x = *(short*)(&RD0.m_data);
	//	x = x / 32767;
	//	x = exp(-x);
	//	x = 1 / (1 + x);
	//	x = x * 32767;
	//	RD0 = x;
	//	M[RA1++] = RD0;
	//}

	Return_AutoField(3 * MMU_BASE);
}

////////////////////////////////////////////////////////
//  名称:
//      Tanh
//  功能:
//      Tanh函数，q15
//  参数:
//      1.M[RSP+2*MMU_BASE]：输入地址
//      2.M[RSP+1*MMU_BASE]：输出地址
//      3.M[RSP+0*MMU_BASE]：数据长度
//  返回值:
//      无
////////////////////////////////////////////////////////
Sub_AutoField Tanh
{
	RA0 = M[RSP + 2 * MMU_BASE];
	RA1 = M[RSP + 1 * MMU_BASE];
	RD0 = M[RSP + 0 * MMU_BASE];

	//查表法
	int tab[2048] = { 0x0000,0x001f,0x003f,0x005f,0x007f,0x009f,0x00bf,0x00df,0x00ff,0x011f,0x013f,0x015f,0x017f,0x019f,0x01bf,0x01df,0x01ff,0x021f,0x023f,0x025f,0x027f,0x029f,0x02bf,0x02df,0x02ff,0x031f,0x033f,0x035f,0x037f,0x039f,0x03bf,0x03df,0x03ff,0x041f,0x043f,0x045f,0x047f,0x049f,0x04bf,0x04df,0x04ff,0x051f,0x053f,0x055f,0x057f,0x059f,0x05bf,0x05de,0x05fe,0x061e,0x063e,0x065e,0x067e,0x069e,0x06be,0x06de,0x06fe,0x071e,0x073e,0x075d,0x077d,0x079d,0x07bd,0x07dd,0x07fd,0x081d,0x083d,0x085c,0x087c,0x089c,0x08bc,0x08dc,0x08fc,0x091c,0x093b,0x095b,0x097b,0x099b,0x09bb,0x09da,0x09fa,0x0a1a,0x0a3a,0x0a5a,0x0a79,0x0a99,0x0ab9,0x0ad9,0x0af9,0x0b18,0x0b38,0x0b58,0x0b78,0x0b97,0x0bb7,0x0bd7,0x0bf7,0x0c16,0x0c36,0x0c56,0x0c75,0x0c95,0x0cb5,0x0cd4,0x0cf4,0x0d14,0x0d33,0x0d53,0x0d73,0x0d92,0x0db2,0x0dd2,0x0df1,0x0e11,0x0e31,0x0e50,0x0e70,0x0e8f,0x0eaf,0x0ece,0x0eee,0x0f0e,0x0f2d,0x0f4d,0x0f6c,0x0f8c,0x0fab,0x0fcb,0x0fea,0x100a,0x1029,0x1049,0x1068,0x1088,0x10a7,0x10c7,0x10e6,0x1106,0x1125,0x1144,0x1164,0x1183,0x11a3,0x11c2,0x11e1,0x1201,0x1220,0x123f,0x125f,0x127e,0x129d,0x12bd,0x12dc,0x12fb,0x131b,0x133a,0x1359,0x1378,0x1398,0x13b7,0x13d6,0x13f5,0x1415,0x1434,0x1453,0x1472,0x1491,0x14b1,0x14d0,0x14ef,0x150e,0x152d,0x154c,0x156b,0x158b,0x15aa,0x15c9,0x15e8,0x1607,0x1626,0x1645,0x1664,0x1683,0x16a2,0x16c1,0x16e0,0x16ff,0x171e,0x173d,0x175c,0x177b,0x179a,0x17b8,0x17d7,0x17f6,0x1815,0x1834,0x1853,0x1872,0x1891,0x18af,0x18ce,0x18ed,0x190c,0x192a,0x1949,0x1968,0x1987,0x19a5,0x19c4,0x19e3,0x1a02,0x1a20,0x1a3f,0x1a5e,0x1a7c,0x1a9b,0x1ab9,0x1ad8,0x1af7,0x1b15,0x1b34,0x1b52,0x1b71,0x1b8f,0x1bae,0x1bcc,0x1beb,0x1c09,0x1c28,0x1c46,0x1c65,0x1c83,0x1ca1,0x1cc0,0x1cde,0x1cfd,0x1d1b,0x1d39,0x1d58,0x1d76,0x1d94,0x1db2,0x1dd1,0x1def,0x1e0d,0x1e2b,0x1e4a,0x1e68,0x1e86,0x1ea4,0x1ec2,0x1ee1,0x1eff,0x1f1d,0x1f3b,0x1f59,0x1f77,0x1f95,0x1fb3,0x1fd1,0x1fef,0x200d,0x202b,0x2049,0x2067,0x2085,0x20a3,0x20c1,0x20df,0x20fd,0x211b,0x2138,0x2156,0x2174,0x2192,0x21b0,0x21cd,0x21eb,0x2209,0x2227,0x2244,0x2262,0x2280,0x229d,0x22bb,0x22d9,0x22f6,0x2314,0x2332,0x234f,0x236d,0x238a,0x23a8,0x23c5,0x23e3,0x2400,0x241e,0x243b,0x2459,0x2476,0x2493,0x24b1,0x24ce,0x24eb,0x2509,0x2526,0x2543,0x2561,0x257e,0x259b,0x25b8,0x25d6,0x25f3,0x2610,0x262d,0x264a,0x2667,0x2685,0x26a2,0x26bf,0x26dc,0x26f9,0x2716,0x2733,0x2750,0x276d,0x278a,0x27a7,0x27c4,0x27e0,0x27fd,0x281a,0x2837,0x2854,0x2871,0x288e,0x28aa,0x28c7,0x28e4,0x2901,0x291d,0x293a,0x2957,0x2973,0x2990,0x29ad,0x29c9,0x29e6,0x2a02,0x2a1f,0x2a3b,0x2a58,0x2a74,0x2a91,0x2aad,0x2aca,0x2ae6,0x2b02,0x2b1f,0x2b3b,0x2b58,0x2b74,0x2b90,0x2bac,0x2bc9,0x2be5,0x2c01,0x2c1d,0x2c3a,0x2c56,0x2c72,0x2c8e,0x2caa,0x2cc6,0x2ce2,0x2cfe,0x2d1a,0x2d36,0x2d52,0x2d6e,0x2d8a,0x2da6,0x2dc2,0x2dde,0x2dfa,0x2e16,0x2e32,0x2e4e,0x2e69,0x2e85,0x2ea1,0x2ebd,0x2ed8,0x2ef4,0x2f10,0x2f2b,0x2f47,0x2f63,0x2f7e,0x2f9a,0x2fb5,0x2fd1,0x2fec,0x3008,0x3023,0x303f,0x305a,0x3076,0x3091,0x30ad,0x30c8,0x30e3,0x30ff,0x311a,0x3135,0x3150,0x316c,0x3187,0x31a2,0x31bd,0x31d8,0x31f4,0x320f,0x322a,0x3245,0x3260,0x327b,0x3296,0x32b1,0x32cc,0x32e7,0x3302,0x331d,0x3338,0x3352,0x336d,0x3388,0x33a3,0x33be,0x33d8,0x33f3,0x340e,0x3429,0x3443,0x345e,0x3479,0x3493,0x34ae,0x34c8,0x34e3,0x34fd,0x3518,0x3532,0x354d,0x3567,0x3582,0x359c,0x35b6,0x35d1,0x35eb,0x3605,0x3620,0x363a,0x3654,0x366f,0x3689,0x36a3,0x36bd,0x36d7,0x36f1,0x370b,0x3725,0x3740,0x375a,0x3774,0x378e,0x37a7,0x37c1,0x37db,0x37f5,0x380f,0x3829,0x3843,0x385d,0x3876,0x3890,0x38aa,0x38c4,0x38dd,0x38f7,0x3911,0x392a,0x3944,0x395d,0x3977,0x3991,0x39aa,0x39c4,0x39dd,0x39f6,0x3a10,0x3a29,0x3a43,0x3a5c,0x3a75,0x3a8f,0x3aa8,0x3ac1,0x3ada,0x3af4,0x3b0d,0x3b26,0x3b3f,0x3b58,0x3b71,0x3b8b,0x3ba4,0x3bbd,0x3bd6,0x3bef,0x3c08,0x3c21,0x3c3a,0x3c52,0x3c6b,0x3c84,0x3c9d,0x3cb6,0x3ccf,0x3ce7,0x3d00,0x3d19,0x3d32,0x3d4a,0x3d63,0x3d7b,0x3d94,0x3dad,0x3dc5,0x3dde,0x3df6,0x3e0f,0x3e27,0x3e40,0x3e58,0x3e70,0x3e89,0x3ea1,0x3eba,0x3ed2,0x3eea,0x3f02,0x3f1b,0x3f33,0x3f4b,0x3f63,0x3f7b,0x3f93,0x3fac,0x3fc4,0x3fdc,0x3ff4,0x400c,0x4024,0x403c,0x4054,0x406b,0x4083,0x409b,0x40b3,0x40cb,0x40e3,0x40fa,0x4112,0x412a,0x4142,0x4159,0x4171,0x4188,0x41a0,0x41b8,0x41cf,0x41e7,0x41fe,0x4216,0x422d,0x4245,0x425c,0x4273,0x428b,0x42a2,0x42b9,0x42d1,0x42e8,0x42ff,0x4316,0x432e,0x4345,0x435c,0x4373,0x438a,0x43a1,0x43b8,0x43cf,0x43e6,0x43fd,0x4414,0x442b,0x4442,0x4459,0x4470,0x4487,0x449e,0x44b4,0x44cb,0x44e2,0x44f9,0x450f,0x4526,0x453d,0x4553,0x456a,0x4580,0x4597,0x45ad,0x45c4,0x45da,0x45f1,0x4607,0x461e,0x4634,0x464a,0x4661,0x4677,0x468d,0x46a4,0x46ba,0x46d0,0x46e6,0x46fd,0x4713,0x4729,0x473f,0x4755,0x476b,0x4781,0x4797,0x47ad,0x47c3,0x47d9,0x47ef,0x4805,0x481b,0x4830,0x4846,0x485c,0x4872,0x4887,0x489d,0x48b3,0x48c9,0x48de,0x48f4,0x4909,0x491f,0x4934,0x494a,0x495f,0x4975,0x498a,0x49a0,0x49b5,0x49cb,0x49e0,0x49f5,0x4a0b,0x4a20,0x4a35,0x4a4a,0x4a60,0x4a75,0x4a8a,0x4a9f,0x4ab4,0x4ac9,0x4ade,0x4af3,0x4b08,0x4b1d,0x4b32,0x4b47,0x4b5c,0x4b71,0x4b86,0x4b9b,0x4bb0,0x4bc4,0x4bd9,0x4bee,0x4c03,0x4c17,0x4c2c,0x4c41,0x4c55,0x4c6a,0x4c7f,0x4c93,0x4ca8,0x4cbc,0x4cd1,0x4ce5,0x4cf9,0x4d0e,0x4d22,0x4d37,0x4d4b,0x4d5f,0x4d74,0x4d88,0x4d9c,0x4db0,0x4dc5,0x4dd9,0x4ded,0x4e01,0x4e15,0x4e29,0x4e3d,0x4e51,0x4e65,0x4e79,0x4e8d,0x4ea1,0x4eb5,0x4ec9,0x4edd,0x4ef1,0x4f04,0x4f18,0x4f2c,0x4f40,0x4f54,0x4f67,0x4f7b,0x4f8f,0x4fa2,0x4fb6,0x4fc9,0x4fdd,0x4ff0,0x5004,0x5017,0x502b,0x503e,0x5052,0x5065,0x5078,0x508c,0x509f,0x50b2,0x50c6,0x50d9,0x50ec,0x50ff,0x5112,0x5126,0x5139,0x514c,0x515f,0x5172,0x5185,0x5198,0x51ab,0x51be,0x51d1,0x51e4,0x51f7,0x520a,0x521c,0x522f,0x5242,0x5255,0x5268,0x527a,0x528d,0x52a0,0x52b2,0x52c5,0x52d8,0x52ea,0x52fd,0x530f,0x5322,0x5334,0x5347,0x5359,0x536c,0x537e,0x5390,0x53a3,0x53b5,0x53c7,0x53da,0x53ec,0x53fe,0x5410,0x5422,0x5435,0x5447,0x5459,0x546b,0x547d,0x548f,0x54a1,0x54b3,0x54c5,0x54d7,0x54e9,0x54fb,0x550d,0x551f,0x5530,0x5542,0x5554,0x5566,0x5578,0x5589,0x559b,0x55ad,0x55be,0x55d0,0x55e2,0x55f3,0x5605,0x5616,0x5628,0x5639,0x564b,0x565c,0x566e,0x567f,0x5690,0x56a2,0x56b3,0x56c4,0x56d6,0x56e7,0x56f8,0x5709,0x571a,0x572c,0x573d,0x574e,0x575f,0x5770,0x5781,0x5792,0x57a3,0x57b4,0x57c5,0x57d6,0x57e7,0x57f8,0x5809,0x581a,0x582a,0x583b,0x584c,0x585d,0x586e,0x587e,0x588f,0x58a0,0x58b0,0x58c1,0x58d1,0x58e2,0x58f3,0x5903,0x5914,0x5924,0x5935,0x5945,0x5955,0x5966,0x5976,0x5987,0x5997,0x59a7,0x59b8,0x59c8,0x59d8,0x59e8,0x59f8,0x5a09,0x5a19,0x5a29,0x5a39,0x5a49,0x5a59,0x5a69,0x5a79,0x5a89,0x5a99,0x5aa9,0x5ab9,0x5ac9,0x5ad9,0x5ae9,0x5af9,0x5b08,0x5b18,0x5b28,0x5b38,0x5b48,0x5b57,0x5b67,0x5b77,0x5b86,0x5b96,0x5ba6,0x5bb5,0x5bc5,0x5bd4,0x5be4,0x5bf3,0x5c03,0x5c12,0x5c22,0x5c31,0x5c40,0x5c50,0x5c5f,0x5c6e,0x5c7e,0x5c8d,0x5c9c,0x5cab,0x5cbb,0x5cca,0x5cd9,0x5ce8,0x5cf7,0x5d06,0x5d16,0x5d25,0x5d34,0x5d43,0x5d52,0x5d61,0x5d70,0x5d7f,0x5d8d,0x5d9c,0x5dab,0x5dba,0x5dc9,0x5dd8,0x5de6,0x5df5,0x5e04,0x5e13,0x5e21,0x5e30,0x5e3f,0x5e4d,0x5e5c,0x5e6b,0x5e79,0x5e88,0x5e96,0x5ea5,0x5eb3,0x5ec2,0x5ed0,0x5edf,0x5eed,0x5efb,0x5f0a,0x5f18,0x5f26,0x5f35,0x5f43,0x5f51,0x5f60,0x5f6e,0x5f7c,0x5f8a,0x5f98,0x5fa6,0x5fb5,0x5fc3,0x5fd1,0x5fdf,0x5fed,0x5ffb,0x6009,0x6017,0x6025,0x6033,0x6041,0x604f,0x605c,0x606a,0x6078,0x6086,0x6094,0x60a1,0x60af,0x60bd,0x60cb,0x60d8,0x60e6,0x60f4,0x6101,0x610f,0x611d,0x612a,0x6138,0x6145,0x6153,0x6160,0x616e,0x9e85,0x9e92,0x9ea0,0x9ead,0x9ebb,0x9ec8,0x9ed6,0x9ee3,0x9ef1,0x9eff,0x9f0c,0x9f1a,0x9f28,0x9f35,0x9f43,0x9f51,0x9f5f,0x9f6c,0x9f7a,0x9f88,0x9f96,0x9fa4,0x9fb1,0x9fbf,0x9fcd,0x9fdb,0x9fe9,0x9ff7,0xa005,0xa013,0xa021,0xa02f,0xa03d,0xa04b,0xa05a,0xa068,0xa076,0xa084,0xa092,0xa0a0,0xa0af,0xa0bd,0xa0cb,0xa0da,0xa0e8,0xa0f6,0xa105,0xa113,0xa121,0xa130,0xa13e,0xa14d,0xa15b,0xa16a,0xa178,0xa187,0xa195,0xa1a4,0xa1b3,0xa1c1,0xa1d0,0xa1df,0xa1ed,0xa1fc,0xa20b,0xa21a,0xa228,0xa237,0xa246,0xa255,0xa264,0xa273,0xa281,0xa290,0xa29f,0xa2ae,0xa2bd,0xa2cc,0xa2db,0xa2ea,0xa2fa,0xa309,0xa318,0xa327,0xa336,0xa345,0xa355,0xa364,0xa373,0xa382,0xa392,0xa3a1,0xa3b0,0xa3c0,0xa3cf,0xa3de,0xa3ee,0xa3fd,0xa40d,0xa41c,0xa42c,0xa43b,0xa44b,0xa45a,0xa46a,0xa47a,0xa489,0xa499,0xa4a9,0xa4b8,0xa4c8,0xa4d8,0xa4e8,0xa4f8,0xa507,0xa517,0xa527,0xa537,0xa547,0xa557,0xa567,0xa577,0xa587,0xa597,0xa5a7,0xa5b7,0xa5c7,0xa5d7,0xa5e7,0xa5f7,0xa608,0xa618,0xa628,0xa638,0xa648,0xa659,0xa669,0xa679,0xa68a,0xa69a,0xa6ab,0xa6bb,0xa6cb,0xa6dc,0xa6ec,0xa6fd,0xa70d,0xa71e,0xa72f,0xa73f,0xa750,0xa760,0xa771,0xa782,0xa792,0xa7a3,0xa7b4,0xa7c5,0xa7d6,0xa7e6,0xa7f7,0xa808,0xa819,0xa82a,0xa83b,0xa84c,0xa85d,0xa86e,0xa87f,0xa890,0xa8a1,0xa8b2,0xa8c3,0xa8d4,0xa8e6,0xa8f7,0xa908,0xa919,0xa92a,0xa93c,0xa94d,0xa95e,0xa970,0xa981,0xa992,0xa9a4,0xa9b5,0xa9c7,0xa9d8,0xa9ea,0xa9fb,0xaa0d,0xaa1e,0xaa30,0xaa42,0xaa53,0xaa65,0xaa77,0xaa88,0xaa9a,0xaaac,0xaabe,0xaad0,0xaae1,0xaaf3,0xab05,0xab17,0xab29,0xab3b,0xab4d,0xab5f,0xab71,0xab83,0xab95,0xaba7,0xabb9,0xabcb,0xabde,0xabf0,0xac02,0xac14,0xac26,0xac39,0xac4b,0xac5d,0xac70,0xac82,0xac94,0xaca7,0xacb9,0xaccc,0xacde,0xacf1,0xad03,0xad16,0xad28,0xad3b,0xad4e,0xad60,0xad73,0xad86,0xad98,0xadab,0xadbe,0xadd1,0xade4,0xadf6,0xae09,0xae1c,0xae2f,0xae42,0xae55,0xae68,0xae7b,0xae8e,0xaea1,0xaeb4,0xaec7,0xaeda,0xaeee,0xaf01,0xaf14,0xaf27,0xaf3a,0xaf4e,0xaf61,0xaf74,0xaf88,0xaf9b,0xafae,0xafc2,0xafd5,0xafe9,0xaffc,0xb010,0xb023,0xb037,0xb04a,0xb05e,0xb071,0xb085,0xb099,0xb0ac,0xb0c0,0xb0d4,0xb0e8,0xb0fc,0xb10f,0xb123,0xb137,0xb14b,0xb15f,0xb173,0xb187,0xb19b,0xb1af,0xb1c3,0xb1d7,0xb1eb,0xb1ff,0xb213,0xb227,0xb23b,0xb250,0xb264,0xb278,0xb28c,0xb2a1,0xb2b5,0xb2c9,0xb2de,0xb2f2,0xb307,0xb31b,0xb32f,0xb344,0xb358,0xb36d,0xb381,0xb396,0xb3ab,0xb3bf,0xb3d4,0xb3e9,0xb3fd,0xb412,0xb427,0xb43c,0xb450,0xb465,0xb47a,0xb48f,0xb4a4,0xb4b9,0xb4ce,0xb4e3,0xb4f8,0xb50d,0xb522,0xb537,0xb54c,0xb561,0xb576,0xb58b,0xb5a0,0xb5b6,0xb5cb,0xb5e0,0xb5f5,0xb60b,0xb620,0xb635,0xb64b,0xb660,0xb676,0xb68b,0xb6a1,0xb6b6,0xb6cc,0xb6e1,0xb6f7,0xb70c,0xb722,0xb737,0xb74d,0xb763,0xb779,0xb78e,0xb7a4,0xb7ba,0xb7d0,0xb7e5,0xb7fb,0xb811,0xb827,0xb83d,0xb853,0xb869,0xb87f,0xb895,0xb8ab,0xb8c1,0xb8d7,0xb8ed,0xb903,0xb91a,0xb930,0xb946,0xb95c,0xb973,0xb989,0xb99f,0xb9b6,0xb9cc,0xb9e2,0xb9f9,0xba0f,0xba26,0xba3c,0xba53,0xba69,0xba80,0xba96,0xbaad,0xbac3,0xbada,0xbaf1,0xbb07,0xbb1e,0xbb35,0xbb4c,0xbb62,0xbb79,0xbb90,0xbba7,0xbbbe,0xbbd5,0xbbec,0xbc03,0xbc1a,0xbc31,0xbc48,0xbc5f,0xbc76,0xbc8d,0xbca4,0xbcbb,0xbcd2,0xbcea,0xbd01,0xbd18,0xbd2f,0xbd47,0xbd5e,0xbd75,0xbd8d,0xbda4,0xbdbb,0xbdd3,0xbdea,0xbe02,0xbe19,0xbe31,0xbe48,0xbe60,0xbe78,0xbe8f,0xbea7,0xbebe,0xbed6,0xbeee,0xbf06,0xbf1d,0xbf35,0xbf4d,0xbf65,0xbf7d,0xbf95,0xbfac,0xbfc4,0xbfdc,0xbff4,0xc00c,0xc024,0xc03c,0xc054,0xc06d,0xc085,0xc09d,0xc0b5,0xc0cd,0xc0e5,0xc0fe,0xc116,0xc12e,0xc146,0xc15f,0xc177,0xc190,0xc1a8,0xc1c0,0xc1d9,0xc1f1,0xc20a,0xc222,0xc23b,0xc253,0xc26c,0xc285,0xc29d,0xc2b6,0xc2ce,0xc2e7,0xc300,0xc319,0xc331,0xc34a,0xc363,0xc37c,0xc395,0xc3ae,0xc3c6,0xc3df,0xc3f8,0xc411,0xc42a,0xc443,0xc45c,0xc475,0xc48f,0xc4a8,0xc4c1,0xc4da,0xc4f3,0xc50c,0xc526,0xc53f,0xc558,0xc571,0xc58b,0xc5a4,0xc5bd,0xc5d7,0xc5f0,0xc60a,0xc623,0xc63c,0xc656,0xc66f,0xc689,0xc6a3,0xc6bc,0xc6d6,0xc6ef,0xc709,0xc723,0xc73c,0xc756,0xc770,0xc78a,0xc7a3,0xc7bd,0xc7d7,0xc7f1,0xc80b,0xc825,0xc83f,0xc859,0xc872,0xc88c,0xc8a6,0xc8c0,0xc8db,0xc8f5,0xc90f,0xc929,0xc943,0xc95d,0xc977,0xc991,0xc9ac,0xc9c6,0xc9e0,0xc9fb,0xca15,0xca2f,0xca4a,0xca64,0xca7e,0xca99,0xcab3,0xcace,0xcae8,0xcb03,0xcb1d,0xcb38,0xcb52,0xcb6d,0xcb87,0xcba2,0xcbbd,0xcbd7,0xcbf2,0xcc0d,0xcc28,0xcc42,0xcc5d,0xcc78,0xcc93,0xccae,0xccc8,0xcce3,0xccfe,0xcd19,0xcd34,0xcd4f,0xcd6a,0xcd85,0xcda0,0xcdbb,0xcdd6,0xcdf1,0xce0c,0xce28,0xce43,0xce5e,0xce79,0xce94,0xceb0,0xcecb,0xcee6,0xcf01,0xcf1d,0xcf38,0xcf53,0xcf6f,0xcf8a,0xcfa6,0xcfc1,0xcfdd,0xcff8,0xd014,0xd02f,0xd04b,0xd066,0xd082,0xd09d,0xd0b9,0xd0d5,0xd0f0,0xd10c,0xd128,0xd143,0xd15f,0xd17b,0xd197,0xd1b2,0xd1ce,0xd1ea,0xd206,0xd222,0xd23e,0xd25a,0xd276,0xd292,0xd2ae,0xd2ca,0xd2e6,0xd302,0xd31e,0xd33a,0xd356,0xd372,0xd38e,0xd3aa,0xd3c6,0xd3e3,0xd3ff,0xd41b,0xd437,0xd454,0xd470,0xd48c,0xd4a8,0xd4c5,0xd4e1,0xd4fe,0xd51a,0xd536,0xd553,0xd56f,0xd58c,0xd5a8,0xd5c5,0xd5e1,0xd5fe,0xd61a,0xd637,0xd653,0xd670,0xd68d,0xd6a9,0xd6c6,0xd6e3,0xd6ff,0xd71c,0xd739,0xd756,0xd772,0xd78f,0xd7ac,0xd7c9,0xd7e6,0xd803,0xd820,0xd83c,0xd859,0xd876,0xd893,0xd8b0,0xd8cd,0xd8ea,0xd907,0xd924,0xd941,0xd95e,0xd97b,0xd999,0xd9b6,0xd9d3,0xd9f0,0xda0d,0xda2a,0xda48,0xda65,0xda82,0xda9f,0xdabd,0xdada,0xdaf7,0xdb15,0xdb32,0xdb4f,0xdb6d,0xdb8a,0xdba7,0xdbc5,0xdbe2,0xdc00,0xdc1d,0xdc3b,0xdc58,0xdc76,0xdc93,0xdcb1,0xdcce,0xdcec,0xdd0a,0xdd27,0xdd45,0xdd63,0xdd80,0xdd9e,0xddbc,0xddd9,0xddf7,0xde15,0xde33,0xde50,0xde6e,0xde8c,0xdeaa,0xdec8,0xdee5,0xdf03,0xdf21,0xdf3f,0xdf5d,0xdf7b,0xdf99,0xdfb7,0xdfd5,0xdff3,0xe011,0xe02f,0xe04d,0xe06b,0xe089,0xe0a7,0xe0c5,0xe0e3,0xe101,0xe11f,0xe13e,0xe15c,0xe17a,0xe198,0xe1b6,0xe1d5,0xe1f3,0xe211,0xe22f,0xe24e,0xe26c,0xe28a,0xe2a8,0xe2c7,0xe2e5,0xe303,0xe322,0xe340,0xe35f,0xe37d,0xe39b,0xe3ba,0xe3d8,0xe3f7,0xe415,0xe434,0xe452,0xe471,0xe48f,0xe4ae,0xe4cc,0xe4eb,0xe509,0xe528,0xe547,0xe565,0xe584,0xe5a2,0xe5c1,0xe5e0,0xe5fe,0xe61d,0xe63c,0xe65b,0xe679,0xe698,0xe6b7,0xe6d6,0xe6f4,0xe713,0xe732,0xe751,0xe76f,0xe78e,0xe7ad,0xe7cc,0xe7eb,0xe80a,0xe829,0xe848,0xe866,0xe885,0xe8a4,0xe8c3,0xe8e2,0xe901,0xe920,0xe93f,0xe95e,0xe97d,0xe99c,0xe9bb,0xe9da,0xe9f9,0xea18,0xea37,0xea56,0xea75,0xea95,0xeab4,0xead3,0xeaf2,0xeb11,0xeb30,0xeb4f,0xeb6f,0xeb8e,0xebad,0xebcc,0xebeb,0xec0b,0xec2a,0xec49,0xec68,0xec88,0xeca7,0xecc6,0xece5,0xed05,0xed24,0xed43,0xed63,0xed82,0xeda1,0xedc1,0xede0,0xedff,0xee1f,0xee3e,0xee5d,0xee7d,0xee9c,0xeebc,0xeedb,0xeefa,0xef1a,0xef39,0xef59,0xef78,0xef98,0xefb7,0xefd7,0xeff6,0xf016,0xf035,0xf055,0xf074,0xf094,0xf0b3,0xf0d3,0xf0f2,0xf112,0xf132,0xf151,0xf171,0xf190,0xf1b0,0xf1cf,0xf1ef,0xf20f,0xf22e,0xf24e,0xf26e,0xf28d,0xf2ad,0xf2cd,0xf2ec,0xf30c,0xf32c,0xf34b,0xf36b,0xf38b,0xf3aa,0xf3ca,0xf3ea,0xf409,0xf429,0xf449,0xf469,0xf488,0xf4a8,0xf4c8,0xf4e8,0xf507,0xf527,0xf547,0xf567,0xf587,0xf5a6,0xf5c6,0xf5e6,0xf606,0xf626,0xf645,0xf665,0xf685,0xf6a5,0xf6c5,0xf6e4,0xf704,0xf724,0xf744,0xf764,0xf784,0xf7a4,0xf7c3,0xf7e3,0xf803,0xf823,0xf843,0xf863,0xf883,0xf8a3,0xf8c2,0xf8e2,0xf902,0xf922,0xf942,0xf962,0xf982,0xf9a2,0xf9c2,0xf9e2,0xfa02,0xfa22,0xfa41,0xfa61,0xfa81,0xfaa1,0xfac1,0xfae1,0xfb01,0xfb21,0xfb41,0xfb61,0xfb81,0xfba1,0xfbc1,0xfbe1,0xfc01,0xfc21,0xfc41,0xfc61,0xfc81,0xfca1,0xfcc1,0xfce1,0xfd01,0xfd21,0xfd41,0xfd61,0xfd81,0xfda1,0xfdc1,0xfde1,0xfe01,0xfe21,0xfe41,0xfe61,0xfe81,0xfea1,0xfec1,0xfee1,0xff01,0xff21,0xff41,0xff61,0xff81,0xffa1,0xffc1,0xffe1};
	int len = RD0.m_data;
	for (int i = 0; i < len; i++)
	{
		RD0 = M[RA0++];
		unsigned int x = RD0.m_data;
		x = x >> 5;
		RD1 = tab[x];
		M[RA1++] = RD1;
	}



	////标准公式
	//int len = RD0.m_data;
	//double x,y;
	//for (int i = 0; i < len; i++)
	//{
	//	RD0 = M[RA0++];
	//	x = *(short*)(&RD0.m_data);
	//	x = x / 32767;
	//	y = exp(-x);
	//	x = exp(x);
	//	x = (x - y) / (x + y);
	//	x = x * 32767;
	//	RD0 = x;
	//	M[RA1++] = RD0;
	//}

	Return_AutoField(3 * MMU_BASE);
}

////////////////////////////////////////////////////////
//  名称:
//      Mac_48_1024
//  功能:
//      1024长度的48位乘累加器
//  参数:
//      1.M[RSP+2*MMU_BASE]：输入序列0指针，低16bit有效格式
//      2.M[RSP+1*MMU_BASE]：输入序列1指针，低16bit有效格式
//      3.RD0：输出结果的低32位
//		4.RD1：输出结果的高16位,低16位有效
//  返回值:
//      无
////////////////////////////////////////////////////////
Sub_AutoField Mac_48_1024
{
	RA0 = M[RSP + 1 * MMU_BASE];
	RA1 = M[RSP + 0 * MMU_BASE];
	int len = 1024;
	long long sum = 0;
	int x,y;
	for (int i = 0; i < len; i++)
	{
		RD0 = M[RA0++];
		RD1 = M[RA1++];
		x = *(short*)(&RD0.m_data);					//低16bit 
		y = *(short*)(&RD1.m_data);					//低16bit 
		x = x * y;
		sum += x;
	}
	x = sum >> 32;
	y = sum;
	RD0 = y;
	RD1 = x;

	Return_AutoField(2 * MMU_BASE);

}


////////////////////////////////////////////////////////
//  名称:
//      Rolling_Multi
//  功能:
//      高128*宽64的矩阵与16*16矩阵滚动矩阵乘
//  参数:
//      1.M[RSP+2*MMU_BASE]：高128*宽64的矩阵data首地址,数据格式为Q15
//      2.M[RSP+1*MMU_BASE]：16*16矩阵存放首地址,数据格式为Q15
//      3.M[RSP+0*MMU_BASE]：计算结果地址,数据格式为Q16,已限幅
//  返回值:
//      无
////////////////////////////////////////////////////////
Sub_AutoField Rolling_Multi
{
	RA0 = M[RSP + 2 * MMU_BASE];	//128*64矩阵首地址
	RA1 = M[RSP + 1 * MMU_BASE];	//16*16矩阵首地址
	RA2 = M[RSP + 0 * MMU_BASE];	//结果地址

	short D[8192], A[256], B[256];
	int C[256] = { 0 };
	int data[16];
	for (int i = 0; i < 8192; i++)
	{
		RD0 = M[RA0++];
		D[i] = RD0.m_data;
	}
	for (int i = 0; i < 256; i++)
	{
		RD0 = M[RA1++];
		B[i] = RD0.m_data;
	}

	for (int i = 0; i < 8; i++)
	{
		for (int n = 0; n < 4; n++)
		{
			for (int j = 0; j < 16; j++)
			{
				for (int k = 0; k < 16; k++)
				{
					A[j * 16 + k] = D[1024 * i + 64 * j + k + 16 * n];
				}
			}
			conv.Multi_Array(A, B, C);
			for (int j = 0; j < 16; j++)
			{
				for (int k = 0; k < 16; k++)
				{
					D[1024 * i + 64 * j + k + 16 * n] = C[j * 16 + k];
				}
			}

		}
	}

	for (int i = 0; i < 8192; i++)
	{
		RD0 = D[i];
		M[RA2++] = RD0;
		//RD0 = T[i];
		//M[RA1++] = RD0;

	}
	Return_AutoField(3 * MMU_BASE);
}


////////////////////////////////////////////////////////
//  名称:
//      Mac_48_16k
//  功能:
//      16k长度的48位乘累加器
//  参数:
//      1.M[RSP+2*MMU_BASE]：输入序列0指针，低16bit有效格式
//      2.M[RSP+1*MMU_BASE]：输入序列1指针，低16bit有效格式
//      3.RD0：输出结果的低32位
//		4.RD1：输出结果的高16位,低16位有效
//  返回值:
//      无
////////////////////////////////////////////////////////
Sub_AutoField Mac_48_16k
{
	RA0 = M[RSP + 1 * MMU_BASE];
	RA1 = M[RSP + 0 * MMU_BASE];
	int len = 16384;
	long long sum = 0;
	int x,y;
	for (int i = 0; i < len; i++)
	{
		RD0 = M[RA0++];
		RD1 = M[RA1++];
		x = *(short*)(&RD0.m_data);					//低16bit 
		y = *(short*)(&RD1.m_data);					//低16bit 
		x = x * y;
		sum += x;
	}
	x = sum >> 32;
	y = sum;
	RD0 = y;
	RD1 = x;

	Return_AutoField(2 * MMU_BASE);

}